name: Update Gradle Version and Build

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-and-build:
    permissions:
      contents: write
      pull-requests: write
    runs-on: windows-latest  # Windows environment for Chocolatey

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest Gradle release version
        id: gradle_version
        run: |
          echo "Get latest Gradle release version"
          
          # Fetch the latest version from the Gradle releases
          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/gradle/gradle/releases" -ErrorAction Stop
          
            if ($response -eq $null) {
              Write-Host "No response from API."
              exit 1
            }
          
            # Filter for the latest non-prerelease version
            $latest_release = ($response | Where-Object { $_.prerelease -eq $false })[0].name
          
            if (-not $latest_release) {
              Write-Host "No valid release found."
              exit 1
            }
          
            Write-Host "Latest release: $latest_release"
            echo "::set-output name=version::$latest_release"
          }
          catch {
            Write-Host "Failed to fetch the latest Gradle release version: $_"
            exit 1
          }
        shell: pwsh

      - name: Update files and create a new branch with the commit
        run: |
          $new_version = "${{ steps.gradle_version.outputs.version }}"
          echo "New Gradle version: $new_version"

          # Create a new branch locally
          git checkout -b update-${new_version}

          # Update Gradle version in relevant files
          (Get-Content Gradle/gradle.nuspec) -replace '<version>.*</version>', "<version>$new_version</version>" | Set-Content Gradle/gradle.nuspec
          $release_notes_url = "https://docs.gradle.org/$new_version/release-notes.html"
          (Get-Content Gradle/gradle.nuspec) -replace '<releaseNotes>.*</releaseNotes>', "<releaseNotes>[Gradle Release Notes]($release_notes_url)</releaseNotes>" | Set-Content Gradle/gradle.nuspec
          (Get-Content Gradle/tools/chocolateyinstall.ps1) -replace "\$version = '.*'", "\$version = '$new_version'" | Set-Content Gradle/tools/chocolateyinstall.ps1
          (Get-Content Gradle/tools/chocolateybeforemodify.ps1) -replace "\$packageVersion = '.*'", "\$packageVersion = '$new_version'" | Set-Content Gradle/tools/chocolateybeforemodify.ps1

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          Invoke-WebRequest https://community.chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression

      - name: Pack nuspec
        run: choco pack Gradle/gradle.nuspec

      - name: Check Git status
        id: status
        run: |
          $result = git status --short
          if (-not $result) {
            Write-Host "No changes"
            echo "result=false" >> $Env:GITHUB_OUTPUT
          } else {
            Write-Host "Changes found"
            echo "result=true" >> $Env:GITHUB_OUTPUT
          }

      - name: Configure Git user
        run: |
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub Actions"
        if: ${{ steps.status.outputs.result == 'true' }}

      - name: Commit changes
        run: |
          git add Gradle/gradle.nuspec Gradle/tools/chocolateyinstall.ps1 Gradle/tools/chocolateybeforemodify.ps1 *.nupkg
          git commit -m "Update Gradle to ${{ steps.gradle_version.outputs.version }} and pack nupkg"
        if: ${{ steps.status.outputs.result == 'true' }}

      - name: Push branch to remote
        run: |
          git push --set-upstream origin update-${{ steps.gradle_version.outputs.version }}
        if: ${{ steps.status.outputs.result == 'true' }}

      - name: Create pull request
        run: gh pr create -B bugfix/get-latest-gradle-version -H update-${{ steps.gradle_version.outputs.version }} --title 'Update Gradle to version ${{ steps.gradle_version.outputs.version }}' --body 'Automatically updates Gradle to the latest version ${{ steps.gradle_version.outputs.version }} and packs nupkg.'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: Create pull request
      #  uses: peter-evans/create-pull-request@v6
      #  with:
      #    commit-message: "Update Gradle to version ${{ steps.gradle_version.outputs.version }}"
      #    title: "Update Gradle to version ${{ steps.gradle_version.outputs.version }}"
      #    body: "Automatically updates Gradle to the latest version ${{ steps.gradle_version.outputs.version }} and packs nupkg."
      #    branch: "update-${{ steps.gradle_version.outputs.version }}"
      #    base: bugfix/get-latest-gradle-version
      #    labels: "new-version"
